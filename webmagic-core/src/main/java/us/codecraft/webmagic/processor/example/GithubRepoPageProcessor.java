package us.codecraft.webmagic.processor.example;

import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.downloader.HttpClientDownloader;
import us.codecraft.webmagic.pipeline.DatabasePipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
//import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.proxy.Proxy;
import us.codecraft.webmagic.proxy.SimpleProxyProvider;
import us.codecraft.webmagic.selector.Html;

import java.util.ArrayList;
import java.util.List;

/**
 * @author code4crafter@gmail.com <br>
 * @since 0.3.2
 */
public class GithubRepoPageProcessor implements PageProcessor {

    private Site site = Site.me().setRetryTimes(3).setSleepTime(((int)Math.random()*2000+9000)).setTimeOut(20000);
    public int pagecount = 1;

    @Override
    public void process(Page page) {

        //把其他列表页添加到队列里
        ArrayList<String> listurls = new ArrayList<>();
        for(int i=2;i<=16000;i++){
            listurls.add("http://cnnvd.org.cn/web/vulnerability/queryLds.tag?pageno="+i+"&repairLd=");
        }
        page.addTargetRequests(listurls);

        //将漏洞详情页面的链接添加到待处理队列中
        List<String> detailurls = page.getHtml().xpath("//div[@class='list_list']/ul/li/div/a[@class='a_title2' and @target='_blank']/@href").all();
        for(int i=0;i<detailurls.size();i++){
            detailurls.set(i, "http://cnnvd.org.cn" + detailurls.get(i));
        }
        page.addTargetRequests(detailurls);

        //从漏洞详情页面抽取所需信息，若为其他页面则忽略
        page.putField("vulnName", page.getHtml().xpath("//div[@class='detail_xq w770']/h2/text()").toString());
        String cnnvdId = page.getHtml().xpath("//div[@class='detail_xq w770']/ul/li/span/text()").toString();
        if(cnnvdId!=null)page.putField("cnnvdId", cnnvdId.substring(8));
        else page.putField("cnnvdId", null);
        if (page.getResultItems().get("cnnvdId")==null){
            //skip this page
            page.setSkip(true);
            return;
        }
        page.putField("cnnvdLink", "http://cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD="+cnnvdId.substring(8));
        page.putField("cveId", page.getHtml().xpath("//a[@target='_blank' and @rel='nofollow']/text()").toString());
        page.putField("cveLink", page.getHtml().xpath("//a[@target='_blank' and @rel='nofollow']/@href").toString());

        List<String> details = page.getHtml().xpath("//div[@class='detail_xq w770']/ul/li/a/text()").all();

        //System.out.println(page.getHtml().xpath("//div[@class='detail_xq w770']/ul/li/a/text()").all());

        page.putField("vulnType", details.get(2).toString());
        page.putField("vulnRank", details.get(0).toString());
        page.putField("vulnLaunchTime", details.get(3).toString());
        page.putField("vulnAttackType", details.get(4).toString());
        page.putField("vulnUpdateTime", details.get(5).toString());
        page.putField("Factory", "");
        page.putField("vulnSource", "");

        //提取更详细信息
        List<String> textdetails = page.getHtml().xpath("//div[@class='d_ldjj']/p/text()").all();
        page.putField("vulnDescription", textdetails.get(0).toString()+textdetails.get(1).toString());
        page.putField("vulnNotice", textdetails.get(2).toString()+textdetails.get(3).toString());
        page.putField("vulnReference", page.getHtml().xpath("//div[@class='d_ldjj']/p[@=class'ckwz']/text()").all().toString());
        page.putField("affectedEntity", page.getHtml().xpath("//ul[@id='ent']/p/text()").toString());
        String pat = page.getHtml().xpath("//ul[@id='pat']/li/div/a/text()").toString();
        if(pat!=null)page.putField("patch", pat+" http://cnnvd.org.cn"+page.getHtml().xpath("//ul[@id='pat']/li/div/a/@href").toString());
        else page.putField("patch","");
    }

    @Override
    public Site getSite() {
        return site;
    }

    public static void main(String[] args) {
        HttpClientDownloader httpClientDownloader = new HttpClientDownloader();
        httpClientDownloader.setProxyProvider(SimpleProxyProvider.from(new Proxy("192.168.43.30",1082)));
        Spider.create(new GithubRepoPageProcessor()).setDownloader(httpClientDownloader).addUrl("http://cnnvd.org.cn/web/vulnerability/queryLds.tag?pageno=1&repairLd=").addPipeline(new DatabasePipeline()).thread(5).run();
    }
}
